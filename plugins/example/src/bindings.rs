// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
//   * ownership: Borrowing { duplicate_if_necessary: true }
//   * additional derives ["PartialEq", "Eq"]
pub type Name = _rt::String;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_initialize_cabi<T: Guest>() {
    T::initialize();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_name_cabi<T: Guest>() -> *mut u8 {
    let result0 = T::name();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(4).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_name<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_dependencies_cabi<T: Guest>() -> *mut u8 {
    let result0 = T::dependencies();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = result0;
    let len3 = vec3.len();
    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
    let result3 = if layout3.size() != 0 {
        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout3);
        }
        ptr
    } else {
        { ::core::ptr::null_mut() }
    };
    for (i, e) in vec3.into_iter().enumerate() {
        let base = result3.add(i * 8);
        {
            let vec2 = (e.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *base.add(4).cast::<usize>() = len2;
            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
        }
    }
    *ptr1.add(4).cast::<usize>() = len3;
    *ptr1.add(0).cast::<*mut u8>() = result3;
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_dependencies<T: Guest>(arg0: *mut u8) {
    let l2 = *arg0.add(0).cast::<*mut u8>();
    let l3 = *arg0.add(4).cast::<usize>();
    let base4 = l2;
    let len4 = l3;
    for i in 0..len4 {
        let base = base4.add(i * 8);
        {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(4).cast::<usize>();
            _rt::cabi_dealloc(l0, l1, 1);
        }
    }
    _rt::cabi_dealloc(base4, len4 * 8, 4);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_invoke_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let base4 = arg2;
    let len4 = arg3;
    let mut result4 = _rt::Vec::with_capacity(len4);
    for i in 0..len4 {
        let base = base4.add(i * 8);
        let e4 = {
            let l1 = *base.add(0).cast::<*mut u8>();
            let l2 = *base.add(4).cast::<usize>();
            let len3 = l2;
            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

            _rt::string_lift(bytes3)
        };
        result4.push(e4);
    }
    _rt::cabi_dealloc(base4, len4 * 8, 4);
    T::invoke(_rt::string_lift(bytes0), result4);
}
pub trait Guest {
    fn initialize();
    fn name() -> Name;
    fn dependencies() -> _rt::Vec<Name>;
    fn invoke(cmd: _rt::String, args: _rt::Vec<_rt::String>);
}
#[doc(hidden)]

macro_rules! __export_world_plugin_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "initialize"]
    unsafe extern "C" fn export_initialize() {
      $($path_to_types)*::_export_initialize_cabi::<$ty>()
    }
    #[export_name = "name"]
    unsafe extern "C" fn export_name() -> *mut u8 {
      $($path_to_types)*::_export_name_cabi::<$ty>()
    }
    #[export_name = "cabi_post_name"]
    unsafe extern "C" fn _post_return_name(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_name::<$ty>(arg0)
    }
    #[export_name = "dependencies"]
    unsafe extern "C" fn export_dependencies() -> *mut u8 {
      $($path_to_types)*::_export_dependencies_cabi::<$ty>()
    }
    #[export_name = "cabi_post_dependencies"]
    unsafe extern "C" fn _post_return_dependencies(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_dependencies::<$ty>(arg0)
    }
    #[export_name = "invoke"]
    unsafe extern "C" fn export_invoke(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) {
      $($path_to_types)*::_export_invoke_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_plugin_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
pub mod zi {
    pub mod api {
        #[allow(clippy::all)]
        pub mod editor {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Mode {
                Normal,
                Insert,
                Visual,
                Command,
            }
            impl ::core::fmt::Debug for Mode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Mode::Normal => f.debug_tuple("Mode::Normal").finish(),
                        Mode::Insert => f.debug_tuple("Mode::Insert").finish(),
                        Mode::Visual => f.debug_tuple("Mode::Visual").finish(),
                        Mode::Command => f.debug_tuple("Mode::Command").finish(),
                    }
                }
            }
            pub type Line = u32;
            pub type Col = u32;
            #[repr(C)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub struct Position {
                pub line: Line,
                pub col: Col,
            }
            impl ::core::fmt::Debug for Position {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Position")
                        .field("line", &self.line)
                        .field("col", &self.col)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct View {
                handle: _rt::Resource<View>,
            }

            impl View {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for View {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "zi:api/editor")]
                        extern "C" {
                            #[link_name = "[resource-drop]view"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Buffer {
                handle: _rt::Resource<Buffer>,
            }

            impl Buffer {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Buffer {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "zi:api/editor")]
                        extern "C" {
                            #[link_name = "[resource-drop]buffer"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn insert(text: &str) {
                unsafe {
                    let vec0 = text;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "zi:api/editor")]
                    extern "C" {
                        #[link_name = "insert"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_mode() -> Mode {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "zi:api/editor")]
                    extern "C" {
                        #[link_name = "get-mode"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    let v0 = match ret {
                        0 => Mode::Normal,
                        1 => Mode::Insert,
                        2 => Mode::Visual,
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            Mode::Command
                        }
                    };
                    v0
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_mode(mode: Mode) {
                unsafe {
                    let result0 = match mode {
                        Mode::Normal => 0i32,
                        Mode::Insert => 1i32,
                        Mode::Visual => 2i32,
                        Mode::Command => 3i32,
                    };

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "zi:api/editor")]
                    extern "C" {
                        #[link_name = "set-mode"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(result0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_active_view() -> View {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "zi:api/editor")]
                    extern "C" {
                        #[link_name = "get-active-view"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    View::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_command(name: &str) {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "zi:api/editor")]
                    extern "C" {
                        #[link_name = "create-command"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
            impl View {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_buffer(&self) -> Buffer {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "zi:api/editor")]
                        extern "C" {
                            #[link_name = "[method]view.get-buffer"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Buffer::from_handle(ret as u32)
                    }
                }
            }
            impl View {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_cursor(&self) -> Position {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "zi:api/editor")]
                        extern "C" {
                            #[link_name = "[method]view.get-cursor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<i32>();
                        let l2 = *ptr0.add(4).cast::<i32>();
                        Position { line: l1 as u32, col: l2 as u32 }
                    }
                }
            }
            impl View {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_cursor(&self, pos: Position) {
                    unsafe {
                        let Position { line: line0, col: col0 } = pos;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "zi:api/editor")]
                        extern "C" {
                            #[link_name = "[method]view.set-cursor"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(line0), _rt::as_i32(col0));
                    }
                }
            }
        }
    }
}
mod _rt {

    use core::sync::atomic::AtomicU32;
    use core::sync::atomic::Ordering::Relaxed;
    use core::{fmt, marker};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_plugin_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_plugin_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_plugin_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:plugin:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 661] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x98\x04\x01A\x02\x01\
A\x10\x01B\x1d\x01q\x04\x06normal\0\0\x06insert\0\0\x06visual\0\0\x07command\0\0\
\x04\0\x04mode\x03\0\0\x01y\x04\0\x04line\x03\0\x02\x01y\x04\0\x03col\x03\0\x04\x01\
r\x02\x04line\x03\x03col\x05\x04\0\x08position\x03\0\x06\x04\0\x04view\x03\x01\x04\
\0\x06buffer\x03\x01\x01h\x08\x01i\x09\x01@\x01\x04self\x0a\0\x0b\x04\0\x17[meth\
od]view.get-buffer\x01\x0c\x01@\x01\x04self\x0a\0\x07\x04\0\x17[method]view.get-\
cursor\x01\x0d\x01@\x02\x04self\x0a\x03pos\x07\x01\0\x04\0\x17[method]view.set-c\
ursor\x01\x0e\x01@\x01\x04texts\x01\0\x04\0\x06insert\x01\x0f\x01@\0\0\x01\x04\0\
\x08get-mode\x01\x10\x01@\x01\x04mode\x01\x01\0\x04\0\x08set-mode\x01\x11\x01i\x08\
\x01@\0\0\x12\x04\0\x0fget-active-view\x01\x13\x01@\x01\x04names\x01\0\x04\0\x0e\
create-command\x01\x14\x03\x01\x0dzi:api/editor\x05\0\x02\x03\0\0\x04mode\x03\0\x04\
mode\x03\0\x01\x01s\x03\0\x04name\x03\0\x03\x01@\0\x01\0\x04\0\x0ainitialize\x01\
\x05\x01@\0\0\x04\x04\0\x04name\x01\x06\x01p\x04\x01@\0\0\x07\x04\0\x0cdependenc\
ies\x01\x08\x01ps\x01@\x02\x03cmds\x04args\x09\x01\0\x04\0\x06invoke\x01\x0a\x04\
\x01\x0dzi:api/plugin\x04\0\x0b\x0c\x01\0\x06plugin\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
