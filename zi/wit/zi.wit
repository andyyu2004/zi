package zi:api;

world plugin {
    import editor;

    use editor.{mode};

    type name = string;

    export initialize: func();
    export get-name: func() -> name;
    export dependencies: func() -> list<name>;

    export command;
}

// This is structured in a very particular way to get bindgen to do what we want (on both host and guest side).
// - Do not use anything from this interface in the main `world` otherwise the host will generate useless bindings.
// - If this is not in separate interface (and in the main world) we have the above issue + the guest doesn't generate bindings for this.
interface command {
    resource handler {
        constructor();
        // random return tyep for now
        exec: func(cmd: string, args: list<string>) -> u32;
    }
}

interface editor {
    variant mode {
        normal,
        insert,
        visual,
        command,
    }

    type line = u32;
    type col = u32;

    record position {
       line: line,
       col: col,
    }

    insert: func(text: string) -> ();
    get-mode: func() -> mode;
    set-mode: func(mode: mode) -> ();
    get-active-view: func() -> view;

    create-command: func(cmd: string) -> ();

    resource view {
        get-buffer: func() -> buffer;
        get-cursor: func() -> position;
        set-cursor: func(pos: position) -> ();
    }

    resource buffer {
    }
}


